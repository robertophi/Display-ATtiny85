
double_digit_display_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000033e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000033e  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080006a  0080006a  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bba  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000379  00000000  00000000  0000104e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032a  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  000016f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  000018a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006e2  00000000  00000000  00001c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000236d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0f c0       	rjmp	.+30     	; 0x20 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	5f c1       	rjmp	.+702    	; 0x2c4 <__vector_2>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>

0000001e <__ctors_start>:
  1e:	87 01       	movw	r16, r14

00000020 <__ctors_end>:
  20:	11 24       	eor	r1, r1
  22:	1f be       	out	0x3f, r1	; 63
  24:	cf e5       	ldi	r28, 0x5F	; 95
  26:	d2 e0       	ldi	r29, 0x02	; 2
  28:	de bf       	out	0x3e, r29	; 62
  2a:	cd bf       	out	0x3d, r28	; 61

0000002c <__do_copy_data>:
  2c:	10 e0       	ldi	r17, 0x00	; 0
  2e:	a0 e6       	ldi	r26, 0x60	; 96
  30:	b0 e0       	ldi	r27, 0x00	; 0
  32:	ee e3       	ldi	r30, 0x3E	; 62
  34:	f3 e0       	ldi	r31, 0x03	; 3
  36:	02 c0       	rjmp	.+4      	; 0x3c <__do_copy_data+0x10>
  38:	05 90       	lpm	r0, Z+
  3a:	0d 92       	st	X+, r0
  3c:	aa 36       	cpi	r26, 0x6A	; 106
  3e:	b1 07       	cpc	r27, r17
  40:	d9 f7       	brne	.-10     	; 0x38 <__do_copy_data+0xc>

00000042 <__do_clear_bss>:
  42:	20 e0       	ldi	r18, 0x00	; 0
  44:	aa e6       	ldi	r26, 0x6A	; 106
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	01 c0       	rjmp	.+2      	; 0x4c <.do_clear_bss_start>

0000004a <.do_clear_bss_loop>:
  4a:	1d 92       	st	X+, r1

0000004c <.do_clear_bss_start>:
  4c:	a5 37       	cpi	r26, 0x75	; 117
  4e:	b2 07       	cpc	r27, r18
  50:	e1 f7       	brne	.-8      	; 0x4a <.do_clear_bss_loop>

00000052 <__do_global_ctors>:
  52:	10 e0       	ldi	r17, 0x00	; 0
  54:	c0 e2       	ldi	r28, 0x20	; 32
  56:	d0 e0       	ldi	r29, 0x00	; 0
  58:	03 c0       	rjmp	.+6      	; 0x60 <__do_global_ctors+0xe>
  5a:	22 97       	sbiw	r28, 0x02	; 2
  5c:	fe 01       	movw	r30, r28
  5e:	69 d1       	rcall	.+722    	; 0x332 <__tablejump__>
  60:	ce 31       	cpi	r28, 0x1E	; 30
  62:	d1 07       	cpc	r29, r17
  64:	d1 f7       	brne	.-12     	; 0x5a <__do_global_ctors+0x8>
  66:	08 d1       	rcall	.+528    	; 0x278 <main>
  68:	68 c1       	rjmp	.+720    	; 0x33a <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <_ZN4PortC1Ev>:
ï»¿#include "Port.h"


Port::Port(){
	DDRB = 0xFF; //All output por default
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF; //Todos em HIGH por default
  70:	88 bb       	out	0x18, r24	; 24
	MCUCR &= ~(0x01 << PUD); //Pull up enabled por default	
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8f 7b       	andi	r24, 0xBF	; 191
  76:	85 bf       	out	0x35, r24	; 53
  78:	08 95       	ret

0000007a <_ZN4Port12changePullUpEcc>:
		DDRB = (DDRB & ~(0x01 << pin)) | (mode << pin); 
	}
	
}
void Port::changePullUp(char pin, char pullup){
	char c = DDRB;
  7a:	27 b3       	in	r18, 0x17	; 23
	c = (c & (0x01 << pin));
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	06 2e       	mov	r0, r22
  82:	02 c0       	rjmp	.+4      	; 0x88 <_ZN4Port12changePullUpEcc+0xe>
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	0a 94       	dec	r0
  8a:	e2 f7       	brpl	.-8      	; 0x84 <_ZN4Port12changePullUpEcc+0xa>
  8c:	28 23       	and	r18, r24
	c = c >> pin;
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	06 2e       	mov	r0, r22
  92:	02 c0       	rjmp	.+4      	; 0x98 <_ZN4Port12changePullUpEcc+0x1e>
  94:	35 95       	asr	r19
  96:	27 95       	ror	r18
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <_ZN4Port12changePullUpEcc+0x1a>
	//c = 0 -> input
	//c = 1 -> output
	if(c == 0 ){
  9c:	21 11       	cpse	r18, r1
  9e:	0d c0       	rjmp	.+26     	; 0xba <_ZN4Port12changePullUpEcc+0x40>
		PORTB = (PORTB & ~(0x01 << pin)) |(pullup << pin);
  a0:	98 b3       	in	r25, 0x18	; 24
  a2:	80 95       	com	r24
  a4:	89 23       	and	r24, r25
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	9a 01       	movw	r18, r20
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <_ZN4Port12changePullUpEcc+0x36>
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <_ZN4Port12changePullUpEcc+0x32>
  b4:	b9 01       	movw	r22, r18
  b6:	68 2b       	or	r22, r24
  b8:	68 bb       	out	0x18, r22	; 24
  ba:	08 95       	ret

000000bc <_ZN4Port5writeEcc>:
	ch = PINB & (0x01 << pin);
	ch = ch >> pin;
	return ch;
}
void Port::write(char pin, char state){
	PORTB = (PORTB & ~(0x01 << pin)) | (state << pin); 
  bc:	58 b3       	in	r21, 0x18	; 24
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	c9 01       	movw	r24, r18
  c4:	06 2e       	mov	r0, r22
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_ZN4Port5writeEcc+0x10>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <_ZN4Port5writeEcc+0xc>
  d0:	80 95       	com	r24
  d2:	85 23       	and	r24, r21
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	9a 01       	movw	r18, r20
  d8:	02 c0       	rjmp	.+4      	; 0xde <_ZN4Port5writeEcc+0x22>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <_ZN4Port5writeEcc+0x1e>
  e2:	b9 01       	movw	r22, r18
  e4:	68 2b       	or	r22, r24
  e6:	68 bb       	out	0x18, r22	; 24
  e8:	08 95       	ret

000000ea <_ZN4Port12shift74ch595Ecccc>:
	}
	else{
		MCUCR &= ~(0x01 << PUD);
	}
}
void Port::shift74ch595(char data, char DATAPIN, char SHPIN, char STPIN){
  ea:	bf 92       	push	r11
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	7c 01       	movw	r14, r24
  fe:	c6 2e       	mov	r12, r22
 100:	b4 2e       	mov	r11, r20
 102:	12 2f       	mov	r17, r18
	char i,ch;
	write(STPIN,0);
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	60 2f       	mov	r22, r16
 108:	d9 df       	rcall	.-78     	; 0xbc <_ZN4Port5writeEcc>
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0

	for(i=0;i<8;i++){
		ch = data >> i;
 10e:	d1 2c       	mov	r13, r1
 110:	c6 01       	movw	r24, r12
 112:	0c 2e       	mov	r0, r28
 114:	02 c0       	rjmp	.+4      	; 0x11a <_ZN4Port12shift74ch595Ecccc+0x30>
 116:	95 95       	asr	r25
 118:	87 95       	ror	r24
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <_ZN4Port12shift74ch595Ecccc+0x2c>
		ch = ch & 0x01;
 11e:	48 2f       	mov	r20, r24
 120:	41 70       	andi	r20, 0x01	; 1
		write(DATAPIN,ch);
 122:	6b 2d       	mov	r22, r11
 124:	c7 01       	movw	r24, r14
 126:	ca df       	rcall	.-108    	; 0xbc <_ZN4Port5writeEcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <_ZN4Port12shift74ch595Ecccc+0x40>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_ZN4Port12shift74ch595Ecccc+0x46>
		_delay_us(TIME);
		write(SHPIN,1);
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	61 2f       	mov	r22, r17
 134:	c7 01       	movw	r24, r14
 136:	c2 df       	rcall	.-124    	; 0xbc <_ZN4Port5writeEcc>
 138:	22 e0       	ldi	r18, 0x02	; 2
 13a:	2a 95       	dec	r18
 13c:	f1 f7       	brne	.-4      	; 0x13a <_ZN4Port12shift74ch595Ecccc+0x50>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_ZN4Port12shift74ch595Ecccc+0x56>
		_delay_us(TIME);
		write(SHPIN,0);
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	61 2f       	mov	r22, r17
 144:	c7 01       	movw	r24, r14
 146:	ba df       	rcall	.-140    	; 0xbc <_ZN4Port5writeEcc>
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <_ZN4Port12shift74ch595Ecccc+0x60>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_ZN4Port12shift74ch595Ecccc+0x66>
 150:	21 96       	adiw	r28, 0x01	; 1
}
void Port::shift74ch595(char data, char DATAPIN, char SHPIN, char STPIN){
	char i,ch;
	write(STPIN,0);

	for(i=0;i<8;i++){
 152:	c8 30       	cpi	r28, 0x08	; 8
 154:	d1 05       	cpc	r29, r1
 156:	e1 f6       	brne	.-72     	; 0x110 <_ZN4Port12shift74ch595Ecccc+0x26>
		_delay_us(TIME);
		write(SHPIN,0);
		_delay_us(TIME);
	}
	
	write(STPIN,1);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	60 2f       	mov	r22, r16
 15c:	c7 01       	movw	r24, r14
 15e:	ae df       	rcall	.-164    	; 0xbc <_ZN4Port5writeEcc>
 160:	22 e0       	ldi	r18, 0x02	; 2
 162:	2a 95       	dec	r18
 164:	f1 f7       	brne	.-4      	; 0x162 <_ZN4Port12shift74ch595Ecccc+0x78>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_ZN4Port12shift74ch595Ecccc+0x7e>
	_delay_us(TIME);
	write(STPIN,0);	
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	60 2f       	mov	r22, r16
 16c:	c7 01       	movw	r24, r14
 16e:	a6 df       	rcall	.-180    	; 0xbc <_ZN4Port5writeEcc>
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	bf 90       	pop	r11
 182:	08 95       	ret

00000184 <_ZN7DisplayC1Ev>:
#define n7 0b00001110
#define n8 0b11111110
#define n9 0b00111110


Display::Display():
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	2a 97       	sbiw	r28, 0x0a	; 10
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	08 2f       	mov	r16, r24
 19e:	19 2f       	mov	r17, r25
    Port::Port() {
 1a0:	65 df       	rcall	.-310    	; 0x6c <_ZN4PortC1Ev>
        n = 99;
 1a2:	20 2f       	mov	r18, r16
 1a4:	31 2f       	mov	r19, r17
 1a6:	83 e6       	ldi	r24, 0x63	; 99
 1a8:	d9 01       	movw	r26, r18
 1aa:	8d 93       	st	X+, r24
 1ac:	9d 01       	movw	r18, r26
        char aux[10] = {n0,n1,n2,n3,n4,n5,n6,n7,n8,n9};
 1ae:	8a e0       	ldi	r24, 0x0A	; 10
 1b0:	e0 e6       	ldi	r30, 0x60	; 96
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	de 01       	movw	r26, r28
 1b6:	11 96       	adiw	r26, 0x01	; 1
 1b8:	01 90       	ld	r0, Z+
 1ba:	0d 92       	st	X+, r0
 1bc:	8a 95       	dec	r24
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <_ZN7DisplayC1Ev+0x34>
 1c0:	fe 01       	movw	r30, r28
 1c2:	31 96       	adiw	r30, 0x01	; 1
 1c4:	ce 01       	movw	r24, r28
 1c6:	0b 96       	adiw	r24, 0x0b	; 11
        for(int i=0;i<=9;i++){
            display[i] = aux[i];
 1c8:	41 91       	ld	r20, Z+
 1ca:	d9 01       	movw	r26, r18
 1cc:	4d 93       	st	X+, r20
 1ce:	9d 01       	movw	r18, r26

Display::Display():
    Port::Port() {
        n = 99;
        char aux[10] = {n0,n1,n2,n3,n4,n5,n6,n7,n8,n9};
        for(int i=0;i<=9;i++){
 1d0:	e8 17       	cp	r30, r24
 1d2:	f9 07       	cpc	r31, r25
 1d4:	c9 f7       	brne	.-14     	; 0x1c8 <_ZN7DisplayC1Ev+0x44>
            display[i] = aux[i];
        }
}
 1d6:	2a 96       	adiw	r28, 0x0a	; 10
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <_ZN7Display12writeDisplayEv>:
void Display::writeDisplay(){
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
    int i=0,j=0;
	i = n/10;
 1f6:	88 81       	ld	r24, Y
	j= n%10;
 1f8:	6a e0       	ldi	r22, 0x0A	; 10
 1fa:	8d d0       	rcall	.+282    	; 0x316 <__udivmodqi4>
 1fc:	18 2f       	mov	r17, r24
	Port::shift74ch595(display[j],DATAPIN,SHPIN,STPIN);
 1fe:	fe 01       	movw	r30, r28
 200:	e9 0f       	add	r30, r25
 202:	f1 1d       	adc	r31, r1
 204:	01 e0       	ldi	r16, 0x01	; 1
 206:	22 e0       	ldi	r18, 0x02	; 2
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	61 81       	ldd	r22, Z+1	; 0x01
 20c:	ce 01       	movw	r24, r28
 20e:	6d df       	rcall	.-294    	; 0xea <_ZN4Port12shift74ch595Ecccc>
	Port::shift74ch595(display[i],DATAPIN,SHPIN,STPIN);
 210:	fe 01       	movw	r30, r28
 212:	e1 0f       	add	r30, r17
 214:	f1 1d       	adc	r31, r1
 216:	22 e0       	ldi	r18, 0x02	; 2
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	61 81       	ldd	r22, Z+1	; 0x01
 21c:	ce 01       	movw	r24, r28
 21e:	65 df       	rcall	.-310    	; 0xea <_ZN4Port12shift74ch595Ecccc>
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <_ZN7Display14interruptSetupEv>:

void Display::interruptSetup(){
	GIMSK |=  (1<<PCIE);
 22a:	8b b7       	in	r24, 0x3b	; 59
 22c:	80 62       	ori	r24, 0x20	; 32
 22e:	8b bf       	out	0x3b, r24	; 59
	//Habilita interruptção do EXT0
	//Habilita interrupção por "pin change"
	//Só existe uma interrupção externa comum - INT0
	//Todos os pinos de PCINT[5:0] geram a mesma interrupção

	PCMSK |= (1 << PCINT3);
 230:	ab 9a       	sbi	0x15, 3	; 21
	//Habilita o pin0 como gerador da interrupção PCINT
	//Poderiamos colocar os outros também, que iriam gerar apenas a mesma interrupção
	sei();
 232:	78 94       	sei
 234:	08 95       	ret

00000236 <_ZN7Display9interruptEv>:
	//Enable Global Interrupt
}
void Display::interrupt(){
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
	}
	
}
char Port::read(char pin){
	char ch;
	ch = PINB;
 23e:	86 b3       	in	r24, 0x16	; 22
	while(Port::read(SWPIN)==0x01){
 240:	b3 9b       	sbis	0x16, 3	; 22
 242:	16 c0       	rjmp	.+44     	; 0x270 <__stack+0x11>
		n++;
		if(n>99){
			n=99;
 244:	13 e6       	ldi	r17, 0x63	; 99
	sei();
	//Enable Global Interrupt
}
void Display::interrupt(){
	while(Port::read(SWPIN)==0x01){
		n++;
 246:	88 81       	ld	r24, Y
 248:	8f 5f       	subi	r24, 0xFF	; 255
		if(n>99){
 24a:	84 36       	cpi	r24, 0x64	; 100
 24c:	10 f4       	brcc	.+4      	; 0x252 <_ZN7Display9interruptEv+0x1c>
	sei();
	//Enable Global Interrupt
}
void Display::interrupt(){
	while(Port::read(SWPIN)==0x01){
		n++;
 24e:	88 83       	st	Y, r24
 250:	01 c0       	rjmp	.+2      	; 0x254 <_ZN7Display9interruptEv+0x1e>
		if(n>99){
			n=99;
 252:	18 83       	st	Y, r17
		}
		writeDisplay();
 254:	ce 01       	movw	r24, r28
 256:	ca df       	rcall	.-108    	; 0x1ec <_ZN7Display12writeDisplayEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	2f ef       	ldi	r18, 0xFF	; 255
 25a:	84 e3       	ldi	r24, 0x34	; 52
 25c:	9c e0       	ldi	r25, 0x0C	; 12
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	80 40       	sbci	r24, 0x00	; 0
 262:	90 40       	sbci	r25, 0x00	; 0
 264:	e1 f7       	brne	.-8      	; 0x25e <_ZN7Display9interruptEv+0x28>
 266:	00 c0       	rjmp	.+0      	; 0x268 <__stack+0x9>
 268:	00 00       	nop
 26a:	86 b3       	in	r24, 0x16	; 22
	//Poderiamos colocar os outros também, que iriam gerar apenas a mesma interrupção
	sei();
	//Enable Global Interrupt
}
void Display::interrupt(){
	while(Port::read(SWPIN)==0x01){
 26c:	b3 99       	sbic	0x16, 3	; 22
 26e:	eb cf       	rjmp	.-42     	; 0x246 <_ZN7Display9interruptEv+0x10>
		}
		writeDisplay();
		_delay_ms(500);
	}

}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	08 95       	ret

00000278 <main>:

void Port::setMode(char pin, char mode){
	//Mode 1 -> output
	//Mode 0 -> input
	if( (pin>=0) && (pin <= 5) && ((mode==0)||(mode==1))){
		DDRB = (DDRB & ~(0x01 << pin)) | (mode << pin); 
 278:	b8 9a       	sbi	0x17, 0	; 23
 27a:	ba 9a       	sbi	0x17, 2	; 23
 27c:	b9 9a       	sbi	0x17, 1	; 23
 27e:	bb 98       	cbi	0x17, 3	; 23

	display.Port::setMode(DATAPIN,OUT); //out pb0
	display.Port::setMode(SHPIN,OUT); //out pb2
	display.Port::setMode(STPIN,OUT); //out pb1
	display.Port::setMode(SWPIN,IN);
	display.Port::changePullUp(SWPIN,0);
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	63 e0       	ldi	r22, 0x03	; 3
 284:	8a e6       	ldi	r24, 0x6A	; 106
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	f8 de       	rcall	.-528    	; 0x7a <_ZN4Port12changePullUpEcc>
 28a:	bc 9a       	sbi	0x17, 4	; 23
	display.Port::setMode(LEDPIN,OUT);
	display.interruptSetup();
 28c:	8a e6       	ldi	r24, 0x6A	; 106
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	cc df       	rcall	.-104    	; 0x22a <_ZN7Display14interruptSetupEv>

	while(1){

		display.writeDisplay();
		_delay_ms(500);
		if(display.n<=0) display.n=100;
 292:	c4 e6       	ldi	r28, 0x64	; 100
	display.Port::setMode(LEDPIN,OUT);
	display.interruptSetup();

	while(1){

		display.writeDisplay();
 294:	8a e6       	ldi	r24, 0x6A	; 106
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	a9 df       	rcall	.-174    	; 0x1ec <_ZN7Display12writeDisplayEv>
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	84 e3       	ldi	r24, 0x34	; 52
 29e:	9c e0       	ldi	r25, 0x0C	; 12
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0x28>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0x32>
 2aa:	00 00       	nop
		_delay_ms(500);
		if(display.n<=0) display.n=100;
 2ac:	80 91 6a 00 	lds	r24, 0x006A
 2b0:	81 11       	cpse	r24, r1
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <main+0x40>
 2b4:	c0 93 6a 00 	sts	0x006A, r28
		display.n--;
 2b8:	ea e6       	ldi	r30, 0x6A	; 106
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	80 83       	st	Z, r24
const int SWPIN = PB3;

#include "Display.cpp"	

Display display;
int main(void)
 2c2:	e8 cf       	rjmp	.-48     	; 0x294 <main+0x1c>

000002c4 <__vector_2>:

}



ISR(PCINT0_vect){
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	2f 93       	push	r18
 2d0:	3f 93       	push	r19
 2d2:	4f 93       	push	r20
 2d4:	5f 93       	push	r21
 2d6:	6f 93       	push	r22
 2d8:	7f 93       	push	r23
 2da:	8f 93       	push	r24
 2dc:	9f 93       	push	r25
 2de:	af 93       	push	r26
 2e0:	bf 93       	push	r27
 2e2:	ef 93       	push	r30
 2e4:	ff 93       	push	r31
	display.interrupt();	
 2e6:	8a e6       	ldi	r24, 0x6A	; 106
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	a5 df       	rcall	.-182    	; 0x236 <_ZN7Display9interruptEv>
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <_GLOBAL__sub_I__ZN4PortC2Ev>:
const int LEDPIN = PB4;
const int SWPIN = PB3;

#include "Display.cpp"	

Display display;
 30e:	8a e6       	ldi	r24, 0x6A	; 106
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	38 df       	rcall	.-400    	; 0x184 <_ZN7DisplayC1Ev>
 314:	08 95       	ret

00000316 <__udivmodqi4>:
 316:	99 1b       	sub	r25, r25
 318:	79 e0       	ldi	r23, 0x09	; 9
 31a:	04 c0       	rjmp	.+8      	; 0x324 <__udivmodqi4_ep>

0000031c <__udivmodqi4_loop>:
 31c:	99 1f       	adc	r25, r25
 31e:	96 17       	cp	r25, r22
 320:	08 f0       	brcs	.+2      	; 0x324 <__udivmodqi4_ep>
 322:	96 1b       	sub	r25, r22

00000324 <__udivmodqi4_ep>:
 324:	88 1f       	adc	r24, r24
 326:	7a 95       	dec	r23
 328:	c9 f7       	brne	.-14     	; 0x31c <__udivmodqi4_loop>
 32a:	80 95       	com	r24
 32c:	08 95       	ret

0000032e <__tablejump2__>:
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31

00000332 <__tablejump__>:
 332:	05 90       	lpm	r0, Z+
 334:	f4 91       	lpm	r31, Z
 336:	e0 2d       	mov	r30, r0
 338:	09 94       	ijmp

0000033a <_exit>:
 33a:	f8 94       	cli

0000033c <__stop_program>:
 33c:	ff cf       	rjmp	.-2      	; 0x33c <__stop_program>
