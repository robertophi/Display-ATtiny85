
double_digit_display_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000322  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006c  0080006c  000003c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d7  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000366  00000000  00000000  00000e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  000011a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00001488  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  000015ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000570  00000000  00000000  0000198f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001eff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0f c0       	rjmp	.+30     	; 0x20 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__vector_2>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>

0000001e <__ctors_start>:
  1e:	5e 01       	movw	r10, r28

00000020 <__ctors_end>:
  20:	11 24       	eor	r1, r1
  22:	1f be       	out	0x3f, r1	; 63
  24:	cf e5       	ldi	r28, 0x5F	; 95
  26:	d2 e0       	ldi	r29, 0x02	; 2
  28:	de bf       	out	0x3e, r29	; 62
  2a:	cd bf       	out	0x3d, r28	; 61

0000002c <__do_copy_data>:
  2c:	10 e0       	ldi	r17, 0x00	; 0
  2e:	a0 e6       	ldi	r26, 0x60	; 96
  30:	b0 e0       	ldi	r27, 0x00	; 0
  32:	e2 e2       	ldi	r30, 0x22	; 34
  34:	f3 e0       	ldi	r31, 0x03	; 3
  36:	02 c0       	rjmp	.+4      	; 0x3c <__do_copy_data+0x10>
  38:	05 90       	lpm	r0, Z+
  3a:	0d 92       	st	X+, r0
  3c:	ac 36       	cpi	r26, 0x6C	; 108
  3e:	b1 07       	cpc	r27, r17
  40:	d9 f7       	brne	.-10     	; 0x38 <__do_copy_data+0xc>

00000042 <__do_clear_bss>:
  42:	20 e0       	ldi	r18, 0x00	; 0
  44:	ac e6       	ldi	r26, 0x6C	; 108
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	01 c0       	rjmp	.+2      	; 0x4c <.do_clear_bss_start>

0000004a <.do_clear_bss_loop>:
  4a:	1d 92       	st	X+, r1

0000004c <.do_clear_bss_start>:
  4c:	ad 36       	cpi	r26, 0x6D	; 109
  4e:	b2 07       	cpc	r27, r18
  50:	e1 f7       	brne	.-8      	; 0x4a <.do_clear_bss_loop>

00000052 <__do_global_ctors>:
  52:	10 e0       	ldi	r17, 0x00	; 0
  54:	c0 e2       	ldi	r28, 0x20	; 32
  56:	d0 e0       	ldi	r29, 0x00	; 0
  58:	03 c0       	rjmp	.+6      	; 0x60 <__do_global_ctors+0xe>
  5a:	22 97       	sbiw	r28, 0x02	; 2
  5c:	fe 01       	movw	r30, r28
  5e:	5b d1       	rcall	.+694    	; 0x316 <__tablejump__>
  60:	ce 31       	cpi	r28, 0x1E	; 30
  62:	d1 07       	cpc	r29, r17
  64:	d1 f7       	brne	.-12     	; 0x5a <__do_global_ctors+0x8>
  66:	fe d0       	rcall	.+508    	; 0x264 <main>
  68:	5a c1       	rjmp	.+692    	; 0x31e <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <_ZN4PortC1Ev>:
ï»¿#include "Port.h"


Port::Port(){
	DDRB = 0xFF; //All output por default
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF; //Todos em HIGH por default
  70:	88 bb       	out	0x18, r24	; 24
	MCUCR &= ~(0x01 << PUD); //Pull up enabled por default	
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8f 7b       	andi	r24, 0xBF	; 191
  76:	85 bf       	out	0x35, r24	; 53
  78:	08 95       	ret

0000007a <_ZN4Port12changePullUpEcc>:
		DDRB = (DDRB & ~(0x01 << pin)) | (mode << pin); 
	}
	
}
void Port::changePullUp(char pin, char pullup){
	char c = DDRB;
  7a:	27 b3       	in	r18, 0x17	; 23
	c = (c & (0x01 << pin));
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	06 2e       	mov	r0, r22
  82:	02 c0       	rjmp	.+4      	; 0x88 <_ZN4Port12changePullUpEcc+0xe>
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	0a 94       	dec	r0
  8a:	e2 f7       	brpl	.-8      	; 0x84 <_ZN4Port12changePullUpEcc+0xa>
  8c:	28 23       	and	r18, r24
	c = c >> pin;
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	06 2e       	mov	r0, r22
  92:	02 c0       	rjmp	.+4      	; 0x98 <_ZN4Port12changePullUpEcc+0x1e>
  94:	35 95       	asr	r19
  96:	27 95       	ror	r18
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <_ZN4Port12changePullUpEcc+0x1a>
	//c = 0 -> input
	//c = 1 -> output
	if(c == 0 ){
  9c:	21 11       	cpse	r18, r1
  9e:	0d c0       	rjmp	.+26     	; 0xba <_ZN4Port12changePullUpEcc+0x40>
		PORTB = (PORTB & ~(0x01 << pin)) |(pullup << pin);
  a0:	98 b3       	in	r25, 0x18	; 24
  a2:	80 95       	com	r24
  a4:	89 23       	and	r24, r25
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	9a 01       	movw	r18, r20
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <_ZN4Port12changePullUpEcc+0x36>
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <_ZN4Port12changePullUpEcc+0x32>
  b4:	b9 01       	movw	r22, r18
  b6:	68 2b       	or	r22, r24
  b8:	68 bb       	out	0x18, r22	; 24
  ba:	08 95       	ret

000000bc <_ZN4Port5writeEcc>:
	ch = PINB & (0x01 << pin);
	ch = ch >> pin;
	return ch;
}
void Port::write(char pin, char state){
	PORTB = (PORTB & ~(0x01 << pin)) | (state << pin); 
  bc:	58 b3       	in	r21, 0x18	; 24
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	c9 01       	movw	r24, r18
  c4:	06 2e       	mov	r0, r22
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_ZN4Port5writeEcc+0x10>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <_ZN4Port5writeEcc+0xc>
  d0:	80 95       	com	r24
  d2:	85 23       	and	r24, r21
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	9a 01       	movw	r18, r20
  d8:	02 c0       	rjmp	.+4      	; 0xde <_ZN4Port5writeEcc+0x22>
  da:	22 0f       	add	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <_ZN4Port5writeEcc+0x1e>
  e2:	b9 01       	movw	r22, r18
  e4:	68 2b       	or	r22, r24
  e6:	68 bb       	out	0x18, r22	; 24
  e8:	08 95       	ret

000000ea <_ZN4Port12shift74ch595Ecccc>:
	}
	else{
		MCUCR &= ~(0x01 << PUD);
	}
}
void Port::shift74ch595(char data, char DATAPIN, char SHPIN, char STPIN){
  ea:	bf 92       	push	r11
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	7c 01       	movw	r14, r24
  fe:	c6 2e       	mov	r12, r22
 100:	b4 2e       	mov	r11, r20
 102:	12 2f       	mov	r17, r18
	char i,ch;
	write(STPIN,0);
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	60 2f       	mov	r22, r16
 108:	d9 df       	rcall	.-78     	; 0xbc <_ZN4Port5writeEcc>
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0

	for(i=0;i<8;i++){
		ch = data >> i;
 10e:	d1 2c       	mov	r13, r1
 110:	c6 01       	movw	r24, r12
 112:	0c 2e       	mov	r0, r28
 114:	02 c0       	rjmp	.+4      	; 0x11a <_ZN4Port12shift74ch595Ecccc+0x30>
 116:	95 95       	asr	r25
 118:	87 95       	ror	r24
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <_ZN4Port12shift74ch595Ecccc+0x2c>
		ch = ch & 0x01;
 11e:	48 2f       	mov	r20, r24
 120:	41 70       	andi	r20, 0x01	; 1
		write(DATAPIN,ch);
 122:	6b 2d       	mov	r22, r11
 124:	c7 01       	movw	r24, r14
 126:	ca df       	rcall	.-108    	; 0xbc <_ZN4Port5writeEcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	8a 95       	dec	r24
 12c:	f1 f7       	brne	.-4      	; 0x12a <_ZN4Port12shift74ch595Ecccc+0x40>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_ZN4Port12shift74ch595Ecccc+0x46>
		_delay_us(TIME);
		write(SHPIN,1);
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	61 2f       	mov	r22, r17
 134:	c7 01       	movw	r24, r14
 136:	c2 df       	rcall	.-124    	; 0xbc <_ZN4Port5writeEcc>
 138:	22 e0       	ldi	r18, 0x02	; 2
 13a:	2a 95       	dec	r18
 13c:	f1 f7       	brne	.-4      	; 0x13a <_ZN4Port12shift74ch595Ecccc+0x50>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_ZN4Port12shift74ch595Ecccc+0x56>
		_delay_us(TIME);
		write(SHPIN,0);
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	61 2f       	mov	r22, r17
 144:	c7 01       	movw	r24, r14
 146:	ba df       	rcall	.-140    	; 0xbc <_ZN4Port5writeEcc>
 148:	82 e0       	ldi	r24, 0x02	; 2
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <_ZN4Port12shift74ch595Ecccc+0x60>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_ZN4Port12shift74ch595Ecccc+0x66>
 150:	21 96       	adiw	r28, 0x01	; 1
}
void Port::shift74ch595(char data, char DATAPIN, char SHPIN, char STPIN){
	char i,ch;
	write(STPIN,0);

	for(i=0;i<8;i++){
 152:	c8 30       	cpi	r28, 0x08	; 8
 154:	d1 05       	cpc	r29, r1
 156:	e1 f6       	brne	.-72     	; 0x110 <_ZN4Port12shift74ch595Ecccc+0x26>
		_delay_us(TIME);
		write(SHPIN,0);
		_delay_us(TIME);
	}
	
	write(STPIN,1);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	60 2f       	mov	r22, r16
 15c:	c7 01       	movw	r24, r14
 15e:	ae df       	rcall	.-164    	; 0xbc <_ZN4Port5writeEcc>
 160:	22 e0       	ldi	r18, 0x02	; 2
 162:	2a 95       	dec	r18
 164:	f1 f7       	brne	.-4      	; 0x162 <_ZN4Port12shift74ch595Ecccc+0x78>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_ZN4Port12shift74ch595Ecccc+0x7e>
	_delay_us(TIME);
	write(STPIN,0);	
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	60 2f       	mov	r22, r16
 16c:	c7 01       	movw	r24, r14
 16e:	a6 df       	rcall	.-180    	; 0xbc <_ZN4Port5writeEcc>
}
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	bf 90       	pop	r11
 182:	08 95       	ret

00000184 <_Z12writeDisplayv>:
		_delay_ms(500);
	}
	
}

void writeDisplay(){
 184:	0f 93       	push	r16
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	int i=0,j=0;
	i = n/10;
 18a:	80 91 6a 00 	lds	r24, 0x006A
 18e:	90 91 6b 00 	lds	r25, 0x006B
	j= n%10;
 192:	6a e0       	ldi	r22, 0x0A	; 10
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	96 d0       	rcall	.+300    	; 0x2c4 <__divmodhi4>
 198:	eb 01       	movw	r28, r22
	port.shift74ch595(display[j],DATAPIN,SHPIN,STPIN);
 19a:	fc 01       	movw	r30, r24
 19c:	e0 5a       	subi	r30, 0xA0	; 160
 19e:	ff 4f       	sbci	r31, 0xFF	; 255
 1a0:	01 e0       	ldi	r16, 0x01	; 1
 1a2:	22 e0       	ldi	r18, 0x02	; 2
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	60 81       	ld	r22, Z
 1a8:	8c e6       	ldi	r24, 0x6C	; 108
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	9e df       	rcall	.-196    	; 0xea <_ZN4Port12shift74ch595Ecccc>
	port.shift74ch595(display[i],DATAPIN,SHPIN,STPIN);
 1ae:	c0 5a       	subi	r28, 0xA0	; 160
 1b0:	df 4f       	sbci	r29, 0xFF	; 255
 1b2:	22 e0       	ldi	r18, 0x02	; 2
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	68 81       	ld	r22, Y
 1b8:	8c e6       	ldi	r24, 0x6C	; 108
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	96 df       	rcall	.-212    	; 0xea <_ZN4Port12shift74ch595Ecccc>
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	0f 91       	pop	r16
 1c4:	08 95       	ret

000001c6 <__vector_2>:

}



ISR(PCINT0_vect){
 1c6:	1f 92       	push	r1
 1c8:	0f 92       	push	r0
 1ca:	0f b6       	in	r0, 0x3f	; 63
 1cc:	0f 92       	push	r0
 1ce:	11 24       	eor	r1, r1
 1d0:	2f 93       	push	r18
 1d2:	3f 93       	push	r19
 1d4:	4f 93       	push	r20
 1d6:	5f 93       	push	r21
 1d8:	6f 93       	push	r22
 1da:	7f 93       	push	r23
 1dc:	8f 93       	push	r24
 1de:	9f 93       	push	r25
 1e0:	af 93       	push	r26
 1e2:	bf 93       	push	r27
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	}
	
}
char Port::read(char pin){
	char ch;
	ch = PINB;
 1ec:	86 b3       	in	r24, 0x16	; 22
	
	while(port.read(SWPIN)==0x01){
 1ee:	b3 9b       	sbis	0x16, 3	; 22
 1f0:	20 c0       	rjmp	.+64     	; 0x232 <__vector_2+0x6c>
		n++;
		if(n>99){
			n=99;
 1f2:	c3 e6       	ldi	r28, 0x63	; 99
 1f4:	d0 e0       	ldi	r29, 0x00	; 0


ISR(PCINT0_vect){
	
	while(port.read(SWPIN)==0x01){
		n++;
 1f6:	80 91 6a 00 	lds	r24, 0x006A
 1fa:	90 91 6b 00 	lds	r25, 0x006B
 1fe:	01 96       	adiw	r24, 0x01	; 1
		if(n>99){
 200:	84 36       	cpi	r24, 0x64	; 100
 202:	91 05       	cpc	r25, r1
 204:	2c f4       	brge	.+10     	; 0x210 <__vector_2+0x4a>


ISR(PCINT0_vect){
	
	while(port.read(SWPIN)==0x01){
		n++;
 206:	90 93 6b 00 	sts	0x006B, r25
 20a:	80 93 6a 00 	sts	0x006A, r24
 20e:	04 c0       	rjmp	.+8      	; 0x218 <__vector_2+0x52>
		if(n>99){
			n=99;
 210:	d0 93 6b 00 	sts	0x006B, r29
 214:	c0 93 6a 00 	sts	0x006A, r28
		}
		writeDisplay();
 218:	b5 df       	rcall	.-150    	; 0x184 <_Z12writeDisplayv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	84 e3       	ldi	r24, 0x34	; 52
 21e:	9c e0       	ldi	r25, 0x0C	; 12
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <__vector_2+0x5a>
 228:	00 c0       	rjmp	.+0      	; 0x22a <__vector_2+0x64>
 22a:	00 00       	nop
 22c:	86 b3       	in	r24, 0x16	; 22



ISR(PCINT0_vect){
	
	while(port.read(SWPIN)==0x01){
 22e:	b3 99       	sbic	0x16, 3	; 22
 230:	e2 cf       	rjmp	.-60     	; 0x1f6 <__vector_2+0x30>
		}
		writeDisplay();
		_delay_ms(500);
	}
	
}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <_Z17extInterruptSetupv>:
}


void extInterruptSetup(){
	
	GIMSK |=  (1<<PCIE);
 258:	8b b7       	in	r24, 0x3b	; 59
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	8b bf       	out	0x3b, r24	; 59
	//Habilita interruptção do EXT0
	//Habilita interrupção por "pin change"
	//Só existe uma interrupção externa comum - INT0
	//Todos os pinos de PCINT[5:0] geram a mesma interrupção
	
	PCMSK |= (1 << PCINT3);
 25e:	ab 9a       	sbi	0x15, 3	; 21
	//Habilita o pin0 como gerador da interrupção PCINT
	//Poderiamos colocar os outros também, que iriam gerar apenas a mesma interrupção
	sei();
 260:	78 94       	sei
 262:	08 95       	ret

00000264 <main>:

void Port::setMode(char pin, char mode){
	//Mode 1 -> output
	//Mode 0 -> input
	if( (pin>=0) && (pin <= 5) && ((mode==0)||(mode==1))){
		DDRB = (DDRB & ~(0x01 << pin)) | (mode << pin); 
 264:	b8 9a       	sbi	0x17, 0	; 23
 266:	ba 9a       	sbi	0x17, 2	; 23
 268:	b9 9a       	sbi	0x17, 1	; 23
 26a:	bb 98       	cbi	0x17, 3	; 23
	
	port.setMode(DATAPIN,OUT); //out pb0
	port.setMode(SHPIN,OUT); //out pb2
	port.setMode(STPIN,OUT); //out pb1
	port.setMode(SWPIN,IN); 
	port.changePullUp(SWPIN,0);
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	63 e0       	ldi	r22, 0x03	; 3
 270:	8c e6       	ldi	r24, 0x6C	; 108
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 df       	rcall	.-508    	; 0x7a <_ZN4Port12changePullUpEcc>
 276:	bc 9a       	sbi	0x17, 4	; 23
	port.setMode(LEDPIN,OUT);
	
	extInterruptSetup();
 278:	ef df       	rcall	.-34     	; 0x258 <_Z17extInterruptSetupv>
	
	while(1){
		
		writeDisplay();
		_delay_ms(500);
		if(n<=0) n=100;
 27a:	c4 e6       	ldi	r28, 0x64	; 100
 27c:	d0 e0       	ldi	r29, 0x00	; 0
	extInterruptSetup();
	
	
	while(1){
		
		writeDisplay();
 27e:	82 df       	rcall	.-252    	; 0x184 <_Z12writeDisplayv>
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	84 e3       	ldi	r24, 0x34	; 52
 284:	9c e0       	ldi	r25, 0x0C	; 12
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <main+0x22>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <main+0x2c>
 290:	00 00       	nop
		_delay_ms(500);
		if(n<=0) n=100;
 292:	80 91 6a 00 	lds	r24, 0x006A
 296:	90 91 6b 00 	lds	r25, 0x006B
 29a:	18 16       	cp	r1, r24
 29c:	19 06       	cpc	r1, r25
 29e:	24 f0       	brlt	.+8      	; 0x2a8 <main+0x44>
 2a0:	d0 93 6b 00 	sts	0x006B, r29
 2a4:	c0 93 6a 00 	sts	0x006A, r28
		n--;
 2a8:	80 91 6a 00 	lds	r24, 0x006A
 2ac:	90 91 6b 00 	lds	r25, 0x006B
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	90 93 6b 00 	sts	0x006B, r25
 2b6:	80 93 6a 00 	sts	0x006A, r24

int n=99;
Port port;
char display[10] = {n0,n1,n2,n3,n4,n5,n6,n7,n8,n9};
	
int main(void)
 2ba:	e1 cf       	rjmp	.-62     	; 0x27e <main+0x1a>

000002bc <_GLOBAL__sub_I__ZN4PortC2Ev>:
#define STPIN PB1
#define LEDPIN PB4
#define SWPIN PB3

int n=99;
Port port;
 2bc:	8c e6       	ldi	r24, 0x6C	; 108
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	d5 de       	rcall	.-598    	; 0x6c <_ZN4PortC1Ev>
 2c2:	08 95       	ret

000002c4 <__divmodhi4>:
 2c4:	97 fb       	bst	r25, 7
 2c6:	07 2e       	mov	r0, r23
 2c8:	16 f4       	brtc	.+4      	; 0x2ce <__divmodhi4+0xa>
 2ca:	00 94       	com	r0
 2cc:	06 d0       	rcall	.+12     	; 0x2da <__divmodhi4_neg1>
 2ce:	77 fd       	sbrc	r23, 7
 2d0:	08 d0       	rcall	.+16     	; 0x2e2 <__divmodhi4_neg2>
 2d2:	0b d0       	rcall	.+22     	; 0x2ea <__udivmodhi4>
 2d4:	07 fc       	sbrc	r0, 7
 2d6:	05 d0       	rcall	.+10     	; 0x2e2 <__divmodhi4_neg2>
 2d8:	3e f4       	brtc	.+14     	; 0x2e8 <__divmodhi4_exit>

000002da <__divmodhi4_neg1>:
 2da:	90 95       	com	r25
 2dc:	81 95       	neg	r24
 2de:	9f 4f       	sbci	r25, 0xFF	; 255
 2e0:	08 95       	ret

000002e2 <__divmodhi4_neg2>:
 2e2:	70 95       	com	r23
 2e4:	61 95       	neg	r22
 2e6:	7f 4f       	sbci	r23, 0xFF	; 255

000002e8 <__divmodhi4_exit>:
 2e8:	08 95       	ret

000002ea <__udivmodhi4>:
 2ea:	aa 1b       	sub	r26, r26
 2ec:	bb 1b       	sub	r27, r27
 2ee:	51 e1       	ldi	r21, 0x11	; 17
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <__udivmodhi4_ep>

000002f2 <__udivmodhi4_loop>:
 2f2:	aa 1f       	adc	r26, r26
 2f4:	bb 1f       	adc	r27, r27
 2f6:	a6 17       	cp	r26, r22
 2f8:	b7 07       	cpc	r27, r23
 2fa:	10 f0       	brcs	.+4      	; 0x300 <__udivmodhi4_ep>
 2fc:	a6 1b       	sub	r26, r22
 2fe:	b7 0b       	sbc	r27, r23

00000300 <__udivmodhi4_ep>:
 300:	88 1f       	adc	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	5a 95       	dec	r21
 306:	a9 f7       	brne	.-22     	; 0x2f2 <__udivmodhi4_loop>
 308:	80 95       	com	r24
 30a:	90 95       	com	r25
 30c:	bc 01       	movw	r22, r24
 30e:	cd 01       	movw	r24, r26
 310:	08 95       	ret

00000312 <__tablejump2__>:
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31

00000316 <__tablejump__>:
 316:	05 90       	lpm	r0, Z+
 318:	f4 91       	lpm	r31, Z
 31a:	e0 2d       	mov	r30, r0
 31c:	09 94       	ijmp

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
