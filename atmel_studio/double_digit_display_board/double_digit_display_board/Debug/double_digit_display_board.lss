
double_digit_display_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000240  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000240  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  000002de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083a  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000316  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000283  00000000  00000000  00000ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000329  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000378  00000000  00000000  00001535  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000018ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0f c0       	rjmp	.+30     	; 0x20 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>

0000001e <__ctors_start>:
  1e:	ed 00       	.word	0x00ed	; ????

00000020 <__ctors_end>:
  20:	11 24       	eor	r1, r1
  22:	1f be       	out	0x3f, r1	; 63
  24:	cf e5       	ldi	r28, 0x5F	; 95
  26:	d2 e0       	ldi	r29, 0x02	; 2
  28:	de bf       	out	0x3e, r29	; 62
  2a:	cd bf       	out	0x3d, r28	; 61

0000002c <__do_copy_data>:
  2c:	10 e0       	ldi	r17, 0x00	; 0
  2e:	a0 e6       	ldi	r26, 0x60	; 96
  30:	b0 e0       	ldi	r27, 0x00	; 0
  32:	e0 e4       	ldi	r30, 0x40	; 64
  34:	f2 e0       	ldi	r31, 0x02	; 2
  36:	02 c0       	rjmp	.+4      	; 0x3c <__do_copy_data+0x10>
  38:	05 90       	lpm	r0, Z+
  3a:	0d 92       	st	X+, r0
  3c:	aa 36       	cpi	r26, 0x6A	; 106
  3e:	b1 07       	cpc	r27, r17
  40:	d9 f7       	brne	.-10     	; 0x38 <__do_copy_data+0xc>

00000042 <__do_clear_bss>:
  42:	20 e0       	ldi	r18, 0x00	; 0
  44:	aa e6       	ldi	r26, 0x6A	; 106
  46:	b0 e0       	ldi	r27, 0x00	; 0
  48:	01 c0       	rjmp	.+2      	; 0x4c <.do_clear_bss_start>

0000004a <.do_clear_bss_loop>:
  4a:	1d 92       	st	X+, r1

0000004c <.do_clear_bss_start>:
  4c:	ab 36       	cpi	r26, 0x6B	; 107
  4e:	b2 07       	cpc	r27, r18
  50:	e1 f7       	brne	.-8      	; 0x4a <.do_clear_bss_loop>

00000052 <__do_global_ctors>:
  52:	10 e0       	ldi	r17, 0x00	; 0
  54:	c0 e2       	ldi	r28, 0x20	; 32
  56:	d0 e0       	ldi	r29, 0x00	; 0
  58:	03 c0       	rjmp	.+6      	; 0x60 <__do_global_ctors+0xe>
  5a:	22 97       	sbiw	r28, 0x02	; 2
  5c:	fe 01       	movw	r30, r28
  5e:	ea d0       	rcall	.+468    	; 0x234 <__tablejump__>
  60:	ce 31       	cpi	r28, 0x1E	; 30
  62:	d1 07       	cpc	r29, r17
  64:	d1 f7       	brne	.-12     	; 0x5a <__do_global_ctors+0x8>
  66:	66 d0       	rcall	.+204    	; 0x134 <main>
  68:	e9 c0       	rjmp	.+466    	; 0x23c <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <_ZN4PortC1Ev>:
ï»¿#include "Port.h"


Port::Port(){
	DDRB = 0xFF; //All output por default
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF; //Todos em HIGH por default
  70:	88 bb       	out	0x18, r24	; 24
	MCUCR &= ~(0x01 << PUD); //Pull up enabled por default	
  72:	85 b7       	in	r24, 0x35	; 53
  74:	8f 7b       	andi	r24, 0xBF	; 191
  76:	85 bf       	out	0x35, r24	; 53
  78:	08 95       	ret

0000007a <_ZN4Port5writeEcc>:
	ch = PINB & (0x01 << pin);
	ch = ch >> pin;
	return ch;
}
void Port::write(char pin, char state){
	PORTB = (PORTB & ~(0x01 << pin)) | (state << pin); 
  7a:	58 b3       	in	r21, 0x18	; 24
  7c:	21 e0       	ldi	r18, 0x01	; 1
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	c9 01       	movw	r24, r18
  82:	06 2e       	mov	r0, r22
  84:	02 c0       	rjmp	.+4      	; 0x8a <_ZN4Port5writeEcc+0x10>
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	0a 94       	dec	r0
  8c:	e2 f7       	brpl	.-8      	; 0x86 <_ZN4Port5writeEcc+0xc>
  8e:	80 95       	com	r24
  90:	85 23       	and	r24, r21
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	9a 01       	movw	r18, r20
  96:	02 c0       	rjmp	.+4      	; 0x9c <_ZN4Port5writeEcc+0x22>
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	6a 95       	dec	r22
  9e:	e2 f7       	brpl	.-8      	; 0x98 <_ZN4Port5writeEcc+0x1e>
  a0:	b9 01       	movw	r22, r18
  a2:	68 2b       	or	r22, r24
  a4:	68 bb       	out	0x18, r22	; 24
  a6:	08 95       	ret

000000a8 <_Z8sendDatac>:
	}
	return 0;

}

void sendData(char data){
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	08 2f       	mov	r16, r24
	char i,ch;
	port.write(STPIN,0);
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	8a e6       	ldi	r24, 0x6A	; 106
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	df df       	rcall	.-66     	; 0x7a <_ZN4Port5writeEcc>
  bc:	c0 e0       	ldi	r28, 0x00	; 0
  be:	d0 e0       	ldi	r29, 0x00	; 0

	for(i=0;i<8;i++){
		ch = data >> i;
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	a8 01       	movw	r20, r16
  c4:	0c 2e       	mov	r0, r28
  c6:	02 c0       	rjmp	.+4      	; 0xcc <_Z8sendDatac+0x24>
  c8:	55 95       	asr	r21
  ca:	47 95       	ror	r20
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <_Z8sendDatac+0x20>
		ch = ch & 0x01;
  d0:	41 70       	andi	r20, 0x01	; 1
		port.write(DATAPIN,ch);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	8a e6       	ldi	r24, 0x6A	; 106
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	d0 df       	rcall	.-96     	; 0x7a <_ZN4Port5writeEcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8a e1       	ldi	r24, 0x1A	; 26
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <_Z8sendDatac+0x34>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <_Z8sendDatac+0x3a>
		_delay_us(TIME);
		port.write(SHPIN,1);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	62 e0       	ldi	r22, 0x02	; 2
  e6:	8a e6       	ldi	r24, 0x6A	; 106
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	c7 df       	rcall	.-114    	; 0x7a <_ZN4Port5writeEcc>
  ec:	8a e1       	ldi	r24, 0x1A	; 26
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <_Z8sendDatac+0x46>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_Z8sendDatac+0x4c>
		_delay_us(TIME);
		port.write(SHPIN,0);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	8a e6       	ldi	r24, 0x6A	; 106
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	be df       	rcall	.-132    	; 0x7a <_ZN4Port5writeEcc>
  fe:	8a e1       	ldi	r24, 0x1A	; 26
 100:	8a 95       	dec	r24
 102:	f1 f7       	brne	.-4      	; 0x100 <_Z8sendDatac+0x58>
 104:	00 c0       	rjmp	.+0      	; 0x106 <_Z8sendDatac+0x5e>
 106:	21 96       	adiw	r28, 0x01	; 1

void sendData(char data){
	char i,ch;
	port.write(STPIN,0);

	for(i=0;i<8;i++){
 108:	c8 30       	cpi	r28, 0x08	; 8
 10a:	d1 05       	cpc	r29, r1
 10c:	d1 f6       	brne	.-76     	; 0xc2 <_Z8sendDatac+0x1a>
		_delay_us(TIME);
		port.write(SHPIN,0);
		_delay_us(TIME);
	}
	
	port.write(STPIN,1);
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	8a e6       	ldi	r24, 0x6A	; 106
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	b1 df       	rcall	.-158    	; 0x7a <_ZN4Port5writeEcc>
 118:	8a e1       	ldi	r24, 0x1A	; 26
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <_Z8sendDatac+0x72>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <_Z8sendDatac+0x78>
	_delay_us(TIME);
	port.write(STPIN,0);
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	8a e6       	ldi	r24, 0x6A	; 106
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	a8 df       	rcall	.-176    	; 0x7a <_ZN4Port5writeEcc>
}
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	08 95       	ret

00000134 <main>:
#define LEDPIN PB4
#define SWPIN PB3

Port port;
int main(void)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	2a 97       	sbiw	r28, 0x0a	; 10
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
	

	char display[10] = {n0,n1,n2,n3,n4,n5,n6,n7,n8,n9};
 148:	8a e0       	ldi	r24, 0x0A	; 10
 14a:	e0 e6       	ldi	r30, 0x60	; 96
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	de 01       	movw	r26, r28
 150:	11 96       	adiw	r26, 0x01	; 1
 152:	01 90       	ld	r0, Z+
 154:	0d 92       	st	X+, r0
 156:	8a 95       	dec	r24
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x1e>

void Port::setMode(char pin, char mode){
	//Mode 1 -> output
	//Mode 0 -> input
	if( (pin>=0) && (pin <= 5) && ((mode==0)||(mode==1))){
		DDRB = (DDRB & ~(0x01 << pin)) | (mode << pin); 
 15a:	b8 9a       	sbi	0x17, 0	; 23
 15c:	ba 9a       	sbi	0x17, 2	; 23
 15e:	b9 9a       	sbi	0x17, 1	; 23
 160:	bc 9a       	sbi	0x17, 4	; 23
		
		
		
		
		
		sendData(display[j]);
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	a1 df       	rcall	.-190    	; 0xa8 <_Z8sendDatac>
		sendData(display[i]);
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9f df       	rcall	.-194    	; 0xa8 <_Z8sendDatac>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	82 e5       	ldi	r24, 0x52	; 82
 16e:	97 e0       	ldi	r25, 0x07	; 7
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x3c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x46>
 17a:	00 00       	nop
		
	
		_delay_ms(300);

		n++;
 17c:	01 e0       	ldi	r16, 0x01	; 1
 17e:	10 e0       	ldi	r17, 0x00	; 0
	
	int n=0,i=0,j=0;
	char ch;
	while(1){
		i = n/10;
		j = n%10;
 180:	0f 2e       	mov	r0, r31
 182:	fa e0       	ldi	r31, 0x0A	; 10
 184:	cf 2e       	mov	r12, r31
 186:	d1 2c       	mov	r13, r1
 188:	f0 2d       	mov	r31, r0
		
	
		_delay_ms(300);

		n++;
		if(n>99) n=0;
 18a:	a1 2c       	mov	r10, r1
 18c:	b1 2c       	mov	r11, r1
 18e:	02 c0       	rjmp	.+4      	; 0x194 <main+0x60>
 190:	0a 2d       	mov	r16, r10
 192:	1b 2d       	mov	r17, r11
	
	int n=0,i=0,j=0;
	char ch;
	while(1){
		i = n/10;
		j = n%10;
 194:	c8 01       	movw	r24, r16
 196:	b6 01       	movw	r22, r12
 198:	24 d0       	rcall	.+72     	; 0x1e2 <__divmodhi4>
 19a:	7b 01       	movw	r14, r22
		
		
		
		
		
		sendData(display[j]);
 19c:	e1 e0       	ldi	r30, 0x01	; 1
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ec 0f       	add	r30, r28
 1a2:	fd 1f       	adc	r31, r29
 1a4:	e8 0f       	add	r30, r24
 1a6:	f9 1f       	adc	r31, r25
 1a8:	80 81       	ld	r24, Z
 1aa:	7e df       	rcall	.-260    	; 0xa8 <_Z8sendDatac>
		sendData(display[i]);
 1ac:	e1 e0       	ldi	r30, 0x01	; 1
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ec 0f       	add	r30, r28
 1b2:	fd 1f       	adc	r31, r29
 1b4:	ee 0d       	add	r30, r14
 1b6:	ff 1d       	adc	r31, r15
 1b8:	80 81       	ld	r24, Z
 1ba:	76 df       	rcall	.-276    	; 0xa8 <_Z8sendDatac>
 1bc:	2f ef       	ldi	r18, 0xFF	; 255
 1be:	82 e5       	ldi	r24, 0x52	; 82
 1c0:	97 e0       	ldi	r25, 0x07	; 7
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	90 40       	sbci	r25, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <main+0x8e>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x98>
 1cc:	00 00       	nop
		
	
		_delay_ms(300);

		n++;
 1ce:	0f 5f       	subi	r16, 0xFF	; 255
 1d0:	1f 4f       	sbci	r17, 0xFF	; 255
		if(n>99) n=0;
 1d2:	04 36       	cpi	r16, 0x64	; 100
 1d4:	11 05       	cpc	r17, r1
 1d6:	e4 f6       	brge	.-72     	; 0x190 <main+0x5c>
 1d8:	dd cf       	rjmp	.-70     	; 0x194 <main+0x60>

000001da <_GLOBAL__sub_I__ZN4PortC2Ev>:
#define SHPIN PB2
#define STPIN PB1
#define LEDPIN PB4
#define SWPIN PB3

Port port;
 1da:	8a e6       	ldi	r24, 0x6A	; 106
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	46 df       	rcall	.-372    	; 0x6c <_ZN4PortC1Ev>
 1e0:	08 95       	ret

000001e2 <__divmodhi4>:
 1e2:	97 fb       	bst	r25, 7
 1e4:	07 2e       	mov	r0, r23
 1e6:	16 f4       	brtc	.+4      	; 0x1ec <__divmodhi4+0xa>
 1e8:	00 94       	com	r0
 1ea:	06 d0       	rcall	.+12     	; 0x1f8 <__divmodhi4_neg1>
 1ec:	77 fd       	sbrc	r23, 7
 1ee:	08 d0       	rcall	.+16     	; 0x200 <__divmodhi4_neg2>
 1f0:	0b d0       	rcall	.+22     	; 0x208 <__udivmodhi4>
 1f2:	07 fc       	sbrc	r0, 7
 1f4:	05 d0       	rcall	.+10     	; 0x200 <__divmodhi4_neg2>
 1f6:	3e f4       	brtc	.+14     	; 0x206 <__divmodhi4_exit>

000001f8 <__divmodhi4_neg1>:
 1f8:	90 95       	com	r25
 1fa:	81 95       	neg	r24
 1fc:	9f 4f       	sbci	r25, 0xFF	; 255
 1fe:	08 95       	ret

00000200 <__divmodhi4_neg2>:
 200:	70 95       	com	r23
 202:	61 95       	neg	r22
 204:	7f 4f       	sbci	r23, 0xFF	; 255

00000206 <__divmodhi4_exit>:
 206:	08 95       	ret

00000208 <__udivmodhi4>:
 208:	aa 1b       	sub	r26, r26
 20a:	bb 1b       	sub	r27, r27
 20c:	51 e1       	ldi	r21, 0x11	; 17
 20e:	07 c0       	rjmp	.+14     	; 0x21e <__udivmodhi4_ep>

00000210 <__udivmodhi4_loop>:
 210:	aa 1f       	adc	r26, r26
 212:	bb 1f       	adc	r27, r27
 214:	a6 17       	cp	r26, r22
 216:	b7 07       	cpc	r27, r23
 218:	10 f0       	brcs	.+4      	; 0x21e <__udivmodhi4_ep>
 21a:	a6 1b       	sub	r26, r22
 21c:	b7 0b       	sbc	r27, r23

0000021e <__udivmodhi4_ep>:
 21e:	88 1f       	adc	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	5a 95       	dec	r21
 224:	a9 f7       	brne	.-22     	; 0x210 <__udivmodhi4_loop>
 226:	80 95       	com	r24
 228:	90 95       	com	r25
 22a:	bc 01       	movw	r22, r24
 22c:	cd 01       	movw	r24, r26
 22e:	08 95       	ret

00000230 <__tablejump2__>:
 230:	ee 0f       	add	r30, r30
 232:	ff 1f       	adc	r31, r31

00000234 <__tablejump__>:
 234:	05 90       	lpm	r0, Z+
 236:	f4 91       	lpm	r31, Z
 238:	e0 2d       	mov	r30, r0
 23a:	09 94       	ijmp

0000023c <_exit>:
 23c:	f8 94       	cli

0000023e <__stop_program>:
 23e:	ff cf       	rjmp	.-2      	; 0x23e <__stop_program>
